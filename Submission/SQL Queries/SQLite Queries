-------------------------------------------------------------------------------
-- Author       Anthony Ravnic, Kumji Park, Mark Synowiec
-- Created      2025-07-30
-- Purpose      Sql Queries to create cleaned tables, run diagnostics/row counts, and create final graphs



--create cleaned data structures from old (unformatted tables). Menu and menuitems were cleaned and thus need to be loaded manually
create table cleaned_MenuPages as  select mp.* from menupages mp inner join cleaned_menu cm on cm.id = mp.menu_id; 



--MENUITEMS price column was scrubbed to bring total from 1335255 to 888707, saving these with ic violations to separate interim table for later ic violation counts

--load menuitems with cleaned pricing data into interim table cleaned_menuitems_w_IC. This table still contains ic violations so we can get counts of ic violation removals

--total rows after cleaning menuitems
select count(*) from cleaned_menuitems_w_IC;


--remove IC violations from cleaned_menuitems_w_ic and create final cleaned_menuitems table
create table cleaned_menuitems as select mi.* from cleaned_menuItems_w_IC mi inner join cleaned_menuPages mp on mi.menu_page_id = mp.id inner join cleaned_menu m on m.id = mp.menu_id;

--total count of cleaned_menuItems after removing IC violations
select count(*) from cleaned_menuitems;

--ALTERNATE CHECK of total final cleaned_menuitems
--select count(*) from cleaned_menuitems mi inner join cleaned_menupages mp on mi.menu_page_id = mp.id inner join cleaned_menu m on mp.menu_id = m.id; 


--add foreign keys (via UI)

--load cleaned_menu from cleaned menu dataset
--add foreign keys (via UI)

--FK menuPages.menu_id --> menu.id
--FK menuItems --> menuPages.id
--FK MenuItems.dish_id --> dishes.id



--row counts of raw sets
select count(*) from menu;
select count(*) from menupages;
select count(*) from menuitems;

-- row counts of cleaned sets
select count(*) from cleaned_menu; --5532
select count(*) from cleaned_menupages; --16704
--scrubbed menuitems with ic violations
select count(*) from cleaned_menuitems_w_IC; --888707
select count(*) from cleaned_menuitems; --796289


-- ic violations from original raw datasets
select count(*) from menupages mp left join menu m on mp.menu_id = m.id where m.id is NULL;   -- 5736 ic violations in Menupages
select count(*) from menuitems mi left join menupages mp on mi.menu_page_id = mp.id where mp.id is NULL; -- 0 ic violations in menuitems related to menupages
select count(*) from menuitems mi left join dishes d on mi.dish_id= d.id where d.id is NULL; --244 ic violations in menuitems related to dishes


--////DATA CLEANING DIAGNOSTICS////

select count(*) from cleaned_menupages; --count of rows left in menupages after removing ic violations
select count(*) from cleaned_menuItems; -- count of rows left in menuitems after removing foreign key violations
select count(*) from cleaned_dishes; -- dishes is a parent table and has no violations



--//////// IC/foreign key violations summary/////////////

--menupages  --66937, 16704, 50233
select 
count (*) as original_menupages_rowcount,
(select count(*) from cleaned_menupages) as cleaned_menupages_rowcount,
((select count(*) from menupages) - (select count(*) from cleaned_menupages)) as num_ic_violations_removed
from menupages;

--IC violations after scrubbing menu items for pricing data to final clean version
--cleaned_menuitems_w_ic --> cleaned_menuitems   --888707, 796289, 92418
select 
count (*) as cleaned_menuitems_w_ic_violations_rowcount,
(select count(*) from cleaned_menuitems) as cleaned_menuitems_rowcount,
((select count(*) from cleaned_menuitems_w_IC) - (select count(*) from cleaned_menuitems)) as num_ic_violations_removed
from cleaned_menuitems_w_IC;



-- total rows removed from raw menuitems to interim cleaned_menuitems_w_IC DUE TO CLEANING PRICE
-- menuitems --> cleaned_menuitems   --1335255, 796289, 538966
select 
count (*) as original_menuitems_rowcount,
(select count(*) from cleaned_menuitems_w_IC) as cleaned_menuitems_rowcount,
((select count(*) from menuitems) - (select count(*) from cleaned_menuitems_w_IC)) as num_ic_violations_removed
from menuitems;

select 
sum(case when price = '' then 1 else 0 end) as blank_price_rows_removed,
sum(case when price = 0 then 1 else 0 end) as zero_price_rows_removed 
from menuitems;


--rows removed from cleaning menu (not ic violations)    --17562,5532,12030
select 
count (*) as original_menu_rowcount,
(select count(*) from cleaned_menu) as cleaned_menu_rowcount,
((select count(*) from menu) - (select count(*) from cleaned_menu)) as num_ic_violations_removed
from menu;


-- alternate check of ic violations verification using original tables and new cleaned menus
/*select 
(select count(*) from menuitems) as original_mi_rows,
  count(*) as remaining_cleaned_menuitems_rows,  
((select count(*) from menuitems) - count(*)) as IC_violations_Menuitems
from menuitems mi inner join menupages mp on mi.menu_page_id = mp.id inner join cleaned_menu cm on cm.id = mp.menu_id; --1335255, 866797, 468458*/
/*
select 
(select count(*) from menupages) as original_mp_rows,
  count(*) as remaining_cleaned_mp_rows,  
((select count(*) from menupages) - count(*)) as IC_violations_Menuitems
from menupages mp inner join cleaned_menu cm on cm.id = mp.menu_id;  --66937, 16704, 50233*/

--
--select 
--(select count(*) from menu) as original_menu_rows,
--  count(*) as remaining_cleaned_menu_rows,  
--((select count(*) from menu) - count(*)) as IC_violations_Menu
--from cleaned_menu; --17562,5532,12030


--////CLEANING DIAGNOSTICS/////////


--rows removed from Menu due to currency != 'Dollars'
select * from menu where currency !='Dollars';

--rows removed from menu due to currency being dollars and locations outside US
select * from menu m left join cleaned_menu cm on m.id = cm.id
where m.currency ='Dollars' and cm.id is null and m.date between '1600-01-01' and '2025-01-01';


--rows removed due to outlier dates
select * from menu m left join cleaned_menu cm on m.id = cm.id
where m.currency ='Dollars' and cm.id is null and m.date not between '1600-01-01' and '2025-01-01';

--rows removed from menuitems that had blank or $0.00 pricing
select * from menuitems mi left join cleaned_menuitems_w_IC cmic on mi.id = cmic.id where cmic.id is null; 

--ALTERNATE CHECK
/*select count(*) as original_menu_dollar_currency_count, 
(select count(*) from cleaned_menu where currency = 'Dollars') as cleaned_menu_dollar_currency_count,
 (count(*) - (select count(*) from cleaned_menu where currency = 'Dollars')) as difference
from menu where currency = 'Dollars';*/


-- changes from place --> place_cleaned
select m.id, m.place as menu_original_place, cm.place_cleaned as cleaned_menu_place_label from menu m left join cleaned_menu cm on m.id = cm.id
where m.place != cm.place_cleaned;  --1371 changed


-- ////////////QUERIES//////////////////

-- CLEANED FINAL QUERIES

--CLEANED Average price by dollar and year
select 
    date_year_cleaned, 
    currency, 
    avg(price)
from 
    cleaned_menu m
    inner join
    cleaned_menupages mp on m.id = mp.menu_id
    inner join
    cleaned_menuitems mi on mp.Id = mi.menu_page_id
where 
    currency = 'Dollars'
    and
    date_year_cleaned != ''
group by 
    date_year_cleaned,
    currency
order by 
    currency, 
    date_year_cleaned
;

--CLEANED avg price by year and city,state  --NOT USED BECAUSE CITY/STATE COMBO IS TOO SPARSE
select 
    date_year_cleaned,
    place_cleaned,
    currency, 
    avg(price)
from 
    cleaned_menu m
    inner join
    cleaned_menupages mp on m.id = mp.menu_id
    inner join
    cleaned_menuitems mi on mp.Id = mi.menu_page_id
where 
    currency = 'Dollars' --redundant
    and
    date_year_cleaned !=''
group by 
    date_year_cleaned,
    place_cleaned,
    currency
order by 
    currency, 
    place_cleaned,
    date_year_cleaned
;


-- CLEANED avg price by year and state category (state, Uknown, or railroad)
select
--    SUBSTRING(place_cleaned, 1, INSTR(place_cleaned, ',') - 1) as city,
    case when place_cleaned = '' then 'UNKNOWN' else SUBSTRING(place_cleaned, INSTR(place_cleaned, ',')+1) end as state_place,  --changes any blanks to 'Unknown' and only grabs state, Unknown or RAILROAD 
    date_year_cleaned,
    currency, 
    avg(price)
from 
    cleaned_menu m
    inner join
    cleaned_menupages mp on m.id = mp.menu_id
    inner join
    cleaned_menuitems mi on mp.Id = mi.menu_page_id
where 
    currency = 'Dollars' 
    and
    date_year_cleaned != ''
group by
    state_place,
    date_year_cleaned,
    place_cleaned,
    currency
order by
    state_place,
    date_year_cleaned, 
    currency, 
    place_cleaned

;


--ORIGINAL RAW DATASET QUERIES

--create  graph of totals from original and just new york (using 'like' statement)

--ORIGINAL/RAW Average price by dollar and year
select 
    strftime('%Y', date) as year,
    currency, 
    avg(price)

 from 
menu m
inner join
menupages mp on m.id = mp.menu_id
inner join
menuitems mi on mp.id = mi.menu_page_id
where 
year is not null
and
currency = 'Dollars'
group by
year,
currency;

--ORIGINAL/RAW table of average price (dollars) by year in new york (rough filtering of NY or NEW YORK) using raw tables
select 
    strftime('%Y', date) as year,
    currency, 
    avg(price)

 from 
menu m
inner join
menupages mp on m.id = mp.menu_id
inner join
menuitems mi on mp.id = mi.menu_page_id
where 
(place like ('%NY%') or place like ('%NEW YORK%'))
and
year is not null
and
currency = 'Dollars'

group by
year,
currency;



















